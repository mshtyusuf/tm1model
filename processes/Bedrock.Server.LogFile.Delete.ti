#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################################################################
##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.0~~##
#####################################################################################

# This process will back up the Data Directory


### Constants ###

cProcess = 'Bedrock.Server.LogFile.Delete';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
sRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;



### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Output parameters
  AsciiOutput( sDebugFile, 'Parameters: pLogFile:     ' | pLogDir );
  AsciiOutput( sDebugFile, '            pLogDays:     ' | NumberToString( pLogDays) );
  AsciiOutput( sDebugFile, '            pErrorDays:   ' | NumberToString( pErrorDays ) );
  AsciiOutput( sDebugFile, '            pBedrockDays: ' | NumberToString( pBedrockDays ) );
  AsciiOutput( sDebugFile, '            pCSVDays:     ' | NumberToString( pCSVDays ) );

EndIf;


### Validate Parameters ###

nErrors = 0;

IF(
pLogDir @= '');
  pLogDir = GetProcessErrorFileDirectory;
ELSE;
  ## Remove leading and/or trailing spaces
  pLogDir = Trim( pLogDir );
ENDIF;

## Remove trailing \ from directory names if present
If(
SubSt( pLogDir, Long( pLogDir ), 1 ) @= '\' );
  pLogDir = SubSt( pLogDir, 1, Long( pLogDir ) - 1 );
EndIf;

# Check that target Logging Directory exists
If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Target Directory: ' |  pLogDir );
ENDIF;

If( FileExists( pLogDir ) = 0 );
  If( pDebug >= 1 );
    nErrors = 1;
    sMessage = 'Logging directory does not exist: ' | pLogDir;
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  ProcessQuit;
EndIf;

sLogDays = NumberToString( ROUND( pLogDays ) );
sErrorDays = NumberToString( ROUND( pErrorDays ) );
sBedrockDays = NumberToString( ROUND( pBedrockDays ) );
sCSVDays = NumberToString( ROUND( pCSVDays ) );

### Save the model to disk
ExecuteProcess( 'Bedrock.Server.SaveDataAll' );

### Create Execute File File ###
DatasourceASCIIQuoteCharacter='';


If( pDebug >= 1 );
  ASCIIOUTPUT( sDebugFile, '' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m tm1s*.log -d -' | sLogDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m tm1auditstore*.log -d -' | sLogDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m TM1ProcessError*.log -d -' | sErrorDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m Bedrock*.* -d -' | sBedrockDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m *.csv -d -' | sCSVDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m *.cma -d -' | sCSVDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sDebugFile, 'forfiles -p "'| pLogDir |'" -s -m *.txt -d -' | sCSVDays | ' -c "cmd /c del @path"' );
ENDIF;
If( pDebug <= 1 );
  sFileName = 'Bedrock Remove Logs.bat';
  ASCIIOUTPUT( sDebugFile, 'Echo Off' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m tm1s*.log -d -' | sLogDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m tm1auditstore*.log -d -' | sLogDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m TM1ProcessError*.log -d -' | sErrorDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m Bedrock*.* -d -' | sBedrockDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m *.csv -d -' | sCSVDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m *.cma -d -' | sCSVDays | ' -c "cmd /c del @path"' );
  ASCIIOUTPUT( sFileName, 'forfiles -p "'| pLogDir |'" -s -m *.txt -d -' | sCSVDays | ' -c "cmd /c del @path"' );
ENDIF;

### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****


#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################################################################
##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.0~~##
#####################################################################################

# Set debug file name
sDebugFile = cDebugFile | 'Epilog.debug';

### Copy Data Dir to Backup ###
sCommand = sFileName;

If( pDebug >= 1 );
  AsciiOutput( sDebugFile, 'Execute Command: ' | sCommand );
EndIf;

If( pDebug <= 1 );
  ExecuteCommand ( sCommand, 1 );
  ASCIIDelete( sFileName);
EndIf;


### Initialise Debug ###

If( pDebug >= 1 );

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion